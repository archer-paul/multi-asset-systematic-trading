

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading-postgres
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Trading Bot Application
  trading-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: trading-bot-app
    environment:
      # Database
      DATABASE_URL: postgresql://trading_user:trading_password@postgres:5432/trading_bot
      REDIS_URL: redis://redis:6379
      
      # Trading Configuration
      TRADING_MODE: fast_mode
      MAX_CYCLES: 0
      INITIAL_CAPITAL: 10000.0
      BACKTEST_MODE: "false"
      
      # Analysis Configuration  
      ANALYSIS_LOOKBACK_DAYS: 90
      ML_TRAINING_LOOKBACK_DAYS: 3650
      NEWS_LOOKBACK_DAYS: 60
      MIN_CONFIDENCE_THRESHOLD: 0.6
      
      # ML Configuration
      ENABLE_TRADITIONAL_ML: "true"
      ENABLE_TRANSFORMER_ML: "true"
      ENABLE_SOCIAL_SENTIMENT: "false"
      SKIP_ML_TRAINING: "true"
      ENABLE_CONGRESS_TRACKING: "false"
      
      # API Keys (set these in .env file)
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      ALPHA_VANTAGE_KEY: ${ALPHA_VANTAGE_KEY}
      FINNHUB_KEY: ${FINNHUB_KEY}
      
      # Social Media (optional)
      ENABLE_TWITTER: "false"
      TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN:-}
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID:-}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET:-}
      
      # Logging
      LOG_LEVEL: INFO
      DEBUG_MODE: "false"
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./exports:/app/exports
      - ./dashboard_data:/app/dashboard_data
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - trading-network
    restart: unless-stopped

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: trading-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@trading.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - trading-network
    restart: unless-stopped
    profiles:
      - admin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: trading-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - trading-network
    restart: unless-stopped
    profiles:
      - admin

volumes:
  postgres_data:
  redis_data:

networks:
  trading-network:
    driver: bridge